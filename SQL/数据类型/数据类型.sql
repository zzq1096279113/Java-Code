#常见的数据类型
/*
数值型：
    整型
    小数
        定点型
        浮点型
字符型：
    较短的文本：char、varchar
    较长的文本：text、blob（较长的二进制数据）
日期型：

原则：
    所选择的类型越简单越好，能保存数值的类型越小越好
*/

#一、整型
/*
分类：
    tinyint（1字节）、smallint（2字节）、mediumint（3字节）、int（4字节）、bigint（8字节）
特点：
    ①如果不设置有无符号，默认为有符号。如果想要设置无符号，需要添加unsigned
    ②如果插入到数值超出了范围，会报异常，并插入临界值
    ③如果不设置长度，会有默认的长度
    ④长度代表了显示的最大宽度，如果不够会用0填充，需zerofill
*/

#二、小数
/*
分类
    浮点型：float(M,D),double(M,D)
    定点型：dec(M,D),decimal(M,D)
特点：
    ①M：有效数字位数；
       D：小数位数；
       超过范围，插入临界值
    ②M和D都可以省略；
       如果是dec，M默认为10，D默认为0；
       如果是float和double，则会根据插入数值的精度决定
    ③定点型精度较高，如果要求插入数值的精度较高，建议使用。如：货币运算
*/

#三、字符型
/*
较短的文本：写法        M的意思                                                   特点                             空间的耗费       效率
    char            char(M)   最大的字符数可以省略，默认为1        固定的字符长度         比较耗费            高
    varchar       char(M)   最大的字符数不可省略                          可变的字符长度         比较节省            低
较长的文本：text、blob（较长的二进制数据）
其他：binary和varbinary用于保存较短的二进制
            enum用于保存枚举
            set用于保存集合
*/

#四、日期型
/*
分类：
    date：只保存日期
    time：只保存时间
    year：只保存年份
    datetime：保存日期和时间
    timestamp：保存日期和时间
特点：             字节          范围                      时区影响
datetime          8               1000-9999           不受
timestamp       4               1970-2038           受
*/
